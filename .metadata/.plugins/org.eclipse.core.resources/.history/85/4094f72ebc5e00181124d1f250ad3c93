package abstractGameObjects;

public class AbstractCard {
	
	
	public static class ArschlochCard implements Comparable<ArschlochCard>{
		private int posInDeck; //hearts, diamonds, spades, clubs
		private String name; // full name like "nine of diamonds"
		private int CardStackSize = 32;	//default
		

		public ArschlochCard(int posInDeck){
			this.setName(ArschlochCard.getCardNames()[posInDeck]);
			this.setPosInDeck(posInDeck);
		}		
		
		@Override
		public int compareTo(ArschlochCard o) {
			
			return this.posInDeck - o.posInDeck;
		}
		
		@Override
		public boolean equals(Object other){
		    if (other == null) {return false;}
		    if (other == this) {return true;}
		    if (!(other instanceof ArschlochCard)){return false;}
		    ArschlochCard compareObj = (ArschlochCard)other;
		    try {
				if(this.getName().equals(compareObj.getName()) && this.getPosInDeck() == compareObj.getPosInDeck() 
						&& this.getPosInType() == this.getPosInType() && this.getType() == compareObj.getType()){
					return true;
				}
			} catch (Exception e) {

				e.printStackTrace();
			}
		    return false;
		}

		@Override
		public String toString() {
			if (this.equals(null)){return "";}
			return name + "[" + posInDeck + "]";
		}

		public int getType() throws Exception{
			int posInDeck;
			if((posInDeck = this.getPosInDeck()) < CardStackSize){
				return (int) posInDeck/ (CardStackSize / 4);
			}
			throw new Exception("invalid_numberOfDeck" + this.getPosInDeck());	
		}
		public int getPosInType(){
			return this.getPosInDeck() % 8;
		}
		public int getPosInDeck() {
			return posInDeck;
		}
		public void setPosInDeck(int posInDeck) {
			this.posInDeck = posInDeck;
		}
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		public static String[] getCardNames() {
			return cardNames;
		}
		public int getCardStackSize() {
			return CardStackSize;
		}
		public void setCardStackSize(int cardStackSize) {
			CardStackSize = cardStackSize;
		}
	}	
}
